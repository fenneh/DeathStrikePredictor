{
  "d": {
    "actions": {
      "finish": [],
      "init": {
        "custom": "local aura_env = aura_env\n\n-- Talents that affect healing done/taken\naura_env.talentMods = {\n    [273953] = 0.15, -- Voracious\n    [374277] = function() return GetSpecialization() == 1 and 0.05 or 0.6 end -- Improved Death Strike\n}\n\n-- Auras that modify healing done/taken (per stack)\n-- Each of these spell IDs must also be entered in trigger 3\naura_env.auraMods = {\n    [391459] =  0.06, -- Sanguine Ground\n    [273947] =  0.08, -- Hemostasis\n    [64844]  =  0.04, -- Divine Hymn\n    [47788]  =  0.60, -- Guardian Spirit\n    [72221]  =  0.05, -- Luck of the Draw\n    [139068] =  0.05, -- Determination\n    [55233]  = function() -- Vampiric Blood\n        local state = WeakAuras.GetTriggerStateForTrigger(aura_env.id, 4) -- Improved Vampiric Blood\n        local talentPoints = state and state[\"\"] and state[\"\"].stacks or 0\n        \n        return 0.3 + talentPoints * 0.05\n    end,\n    [411241] = -0.25, -- Sarkareth: Void Claws\n    [408429] = -0.25, -- Sarkareth: Void Slash\n}\n\n-- If the aura is not already manually anchored to another frame, try to do it automatically\n-- Supported: SUF, PitBull, ZPerl, ElvUI, TukUI, Blizzard\nlocal function anchorFrame()\n    local d = WeakAuras.GetData(aura_env.id)\n    \n    if not d.anchorFrameFrame and not _G[d.anchorFrameFrame] then\n        local frame = nil\n        or SUFUnitplayer and SUFUnitplayer.healthBar\n        or PitBull4_Frames_Player and PitBull4_Frames_Player.HealthBar \n        or XPerl_Player and XPerl_Player.statsFrame and XPerl_Player.statsFrame.healthBar \n        or ElvUF_Player and ElvUF_Player.Health and ElvUF_Player.Health.ClipFrame \n        or oUF_TukuiPlayer and oUF_TukuiPlayer.Health\n        or PlayerFrame and PlayerFrame.healthbar\n        \n        if frame then\n            aura_env.region:SetParent(frame)\n            aura_env.region:SetAnchor(\"TOPLEFT\", frame, \"TOPLEFT\")\n            \n            local w, h = frame:GetSize()\n            aura_env.region:SetRegionWidth(w)\n            aura_env.region:SetRegionHeight(h)\n            aura_env.region.bar.spark:SetHeight(h)\n        end\n    end\nend\n\nif aura_env.config.anchor then anchorFrame() end",
        "do_custom": true
      },
      "start": []
    },
    "alpha": 1,
    "anchorFrameParent": false,
    "anchorFrameType": "SCREEN",
    "anchorPoint": "TOPLEFT",
    "animation": {
      "finish": {
        "duration_type": "seconds",
        "easeStrength": 3,
        "easeType": "none",
        "type": "none"
      },
      "main": {
        "duration_type": "seconds",
        "easeStrength": 3,
        "easeType": "none",
        "type": "none"
      },
      "start": {
        "duration_type": "seconds",
        "easeStrength": 3,
        "easeType": "none",
        "type": "none"
      }
    },
    "authorOptions": [
      {
        "default": true,
        "desc": "Attempt to automatically anchor the aura to the player's health frame.",
        "key": "anchor",
        "name": "Automatically anchor to health",
        "type": "toggle",
        "useDesc": true,
        "width": 1
      }
    ],
    "auto": true,
    "backgroundColor": [
      1,
      0,
      0,
      0
    ],
    "barColor": [
      1,
      0,
      0,
      0
    ],
    "barColor2": [
      1,
      1,
      0,
      1
    ],
    "color": [],
    "conditions": [],
    "config": {
      "anchor": true
    },
    "customAnchor": "\n\n",
    "customText": "\n\n",
    "desaturate": false,
    "enableGradient": false,
    "frameStrata": 1,
    "gradientOrientation": "HORIZONTAL",
    "height": 15,
    "icon": false,
    "iconSource": -1,
    "icon_color": [
      1,
      1,
      1,
      1
    ],
    "icon_side": "RIGHT",
    "id": "Death Strike prediction",
    "information": {
      "forceEvents": true,
      "ignoreOptionsEventErrors": false
    },
    "internalVersion": 65,
    "inverse": false,
    "load": {
      "class": {
        "multi": [],
        "single": "DEATHKNIGHT"
      },
      "class_and_spec": {
        "multi": [
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          true,
          true,
          true
        ],
        "single": 252
      },
      "size": {
        "multi": []
      },
      "spec": {
        "multi": []
      },
      "talent": {
        "multi": []
      },
      "use_class": true,
      "use_class_and_spec": false,
      "use_never": false,
      "zoneIds": ""
    },
    "orientation": "HORIZONTAL",
    "regionType": "aurabar",
    "selfPoint": "TOPLEFT",
    "semver": "1.0.26",
    "source": "import",
    "spark": true,
    "sparkBlendMode": "BLEND",
    "sparkColor": [
      0,
      1,
      0,
      1
    ],
    "sparkDesaturate": false,
    "sparkHeight": 15,
    "sparkHidden": "NEVER",
    "sparkOffsetX": 0,
    "sparkOffsetY": 0,
    "sparkRotation": 0,
    "sparkRotationMode": "AUTO",
    "sparkTexture": "Interface\\AddOns\\WeakAuras\\Media\\Textures\\Square_FullWhite",
    "sparkWidth": 4,
    "subRegions": [
      {
        "type": "subbackground"
      },
      {
        "type": "subforeground"
      }
    ],
    "texture": "Blizzard",
    "tocversion": 100100,
    "triggers": {
      "1": {
        "trigger": {
          "check": "event",
          "custom": "function(event, ...)\n    if event == \"PLAYER_SPECIALIZATION_CHANGED\" or event == \"PLAYER_TALENT_UPDATE\" then\n        aura_env.baseHealing = 0.25\n        aura_env.minHealing = 0.07\n        \n        for talentID, mod in pairs(aura_env.talentMods) do\n            if IsPlayerSpell(talentID) then\n                mod = type(mod) == \"function\" and mod() or mod\n                \n                aura_env.baseHealing = aura_env.baseHealing * (1 + mod)\n                aura_env.minHealing = aura_env.minHealing * (1 + mod)\n            end\n        end\n    elseif event == \"UNIT_STATS\" then\n        aura_env.versMod = 1 + (GetCombatRatingBonus(CR_VERSATILITY_DAMAGE_DONE) + GetVersatilityBonus(CR_VERSATILITY_DAMAGE_DONE)) / 100\n    elseif event == \"TRIGGER\" then\n        local _, triggerStates = ...\n        \n        aura_env.mod = 1\n        \n        for _, state in pairs(triggerStates) do\n            if state then\n                local spellID = state.spellId\n                local mod = aura_env.auraMods[spellID]\n                \n                if mod then\n                    local stacks = state.stacks == 0 and 1 or state.stacks\n                    mod = type(mod) == \"function\" and mod() or mod\n                    \n                    aura_env.mod = aura_env.mod * (1 + (stacks * mod))\n                end\n            end\n        end\n    elseif event == \"DEATH_STRIKE_UPDATE\" and ... then\n        local damage = ...\n        \n        aura_env.damagePool = aura_env.damagePool - damage\n    elseif event == \"COMBAT_LOG_EVENT_UNFILTERED\" and ... then\n        local _, subEvent, hideCaster, _, _, _, _, destGUID = ...\n        \n        if destGUID == WeakAuras.myGUID and not hideCaster then\n            local damage\n            \n            if subEvent == \"SWING_DAMAGE\" then\n                damage = select(12, ...)\n            elseif subEvent == \"SPELL_ABSORBED\" then -- Also fires for absorbed melee swings\n                damage = select(22, ...) or select(19, ...) -- 22nd parameter only exists for absorbed spells (not swings)\n            else -- RANGE_DAMAGE, SPELL_DAMAGE, SPELL_PERIODIC_DAMAGE\n                damage = select(15, ...)\n            end\n            \n            if damage then\n                aura_env.damagePool = (aura_env.damagePool or 0) + damage\n                C_Timer.After(5, function() WeakAuras.ScanEvents(\"DEATH_STRIKE_UPDATE\", damage) end)\n            end\n        end\n    end\n    \n    return true\nend",
          "customDuration": "function()\n    if not aura_env.versMod then return end\n    \n    local auraMod = aura_env.mod or 1\n    local minHealing = aura_env.minHealing * aura_env.versMod\n    local baseHealing = aura_env.baseHealing * aura_env.versMod\n    local healing = (aura_env.damagePool or 0) * baseHealing\n    \n    healing = math.max(UnitHealthMax(\"player\") * minHealing, healing) -- Compare to minimum Death Strike heal\n    healing = healing * auraMod -- Apply aura modifiers\n    \n    return math.min(UnitHealth(\"player\") + healing, UnitHealthMax(\"player\")), UnitHealthMax(\"player\"), 1\nend",
          "custom_hide": "timed",
          "custom_type": "status",
          "debuffType": "HELPFUL",
          "event": "Health",
          "events": "PLAYER_SPECIALIZATION_CHANGED, PLAYER_TALENT_UPDATE, UNIT_STATS:player, TRIGGER:3, CLEU:SWING_DAMAGE:RANGE_DAMAGE:SPELL_DAMAGE:SPELL_PERIODIC_DAMAGE:SPELL_ABSORBED, UNIT_HEALTH:player, UNIT_MAXHEALTH:player, DEATH_STRIKE_UPDATE",
          "names": [],
          "spellIds": [],
          "subeventPrefix": "SPELL",
          "subeventSuffix": "_CAST_START",
          "type": "custom",
          "unit": "player"
        },
        "untrigger": []
      },
      "2": {
        "trigger": {
          "debuffType": "HELPFUL",
          "event": "Conditions",
          "type": "unit",
          "unit": "player",
          "use_absorbHealMode": true,
          "use_absorbMode": true,
          "use_alive": true,
          "use_unit": true
        },
        "untrigger": []
      },
      "3": {
        "trigger": {
          "auraspellids": [
            "391459",
            "273947",
            "64844",
            "47788",
            "72221",
            "139068",
            "55233",
            "411241",
            "408429"
          ],
          "debuffType": "BOTH",
          "showClones": true,
          "type": "aura2",
          "unit": "player",
          "useExactSpellId": true
        },
        "untrigger": []
      },
      "4": {
        "trigger": {
          "class": "DEATHKNIGHT",
          "debuffType": "HELPFUL",
          "event": "Talent Known",
          "spec": 1,
          "talent": {
            "multi": {
              "317133": true
            }
          },
          "type": "unit",
          "unit": "player",
          "use_absorbHealMode": true,
          "use_absorbMode": true,
          "use_class": true,
          "use_spec": true,
          "use_talent": false,
          "use_unit": true
        },
        "untrigger": []
      },
      "activeTriggerMode": 1,
      "customTriggerLogic": "function(t)\n    return t[1] and t[2]\nend",
      "disjunctive": "custom"
    },
    "uid": "Qx41EbNaO57",
    "url": "https://wago.io/DeathStrike/27",
    "useAdjustededMax": false,
    "useAdjustededMin": false,
    "version": 27,
    "wagoID": "Lk5pzmZGW",
    "width": 200,
    "xOffset": 0,
    "yOffset": 0,
    "zoom": 0
  },
  "m": "d",
  "s": "5.5.3",
  "v": 1421,
  "wagoID": "Lk5pzmZGW"
}


